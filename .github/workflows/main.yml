name: Python App Deployment CI

on:
  push:
    branches: [ main ]

jobs:
  github-build:
    name: Github Build Main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Write Secrets to .env
        run: |
          echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}" >> .env
          echo "FLASK_APP=${{ secrets.FLASK_APP }}" >> .env
          echo "APP_NAME=${{ secrets.APP_NAME }}" >> .env
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env
          echo "PYTHONDONTWRITEBYTECODE=1" >> .env
          echo "FLASK_ENV=production" >> .env
          echo "PORT=9000" >> .env
        working-directory: ${{ github.workspace }}

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Tests (Optional)
        run: pytest || true  # Remove '|| true' if you want to fail on test errors

      - name: Create deployment tar file
        run: touch deployment-artifacts.tar.gz

      - name: Bundle deployment files
        run: |
          tar --exclude=deployment-artifacts.tar.gz --exclude=__pycache__ --exclude=.git -czf deployment-artifacts.tar.gz .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment-artifacts.tar.gz

  build_image:
    name: Build Docker Image
    runs-on: [jada-server-prod]
    needs: github-build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts

      - name: Extract artifact
        run: tar -xvf deployment-artifacts.tar.gz

      - name: Set .env file permissions
        run: chmod 600 .env

      - name: Build Docker image
        # run: sudo docker build -t jada-server-main -f Dockerfile .
        run: bash ./scripts/docker/build.sh
        shell: /usr/bin/bash -e {0}

  deploy_container:
    name: Deploy Python App Container
    runs-on: [jada-server-prod]
    needs: build_image
    steps:
      - name: Stop and remove existing container
        run: |
          CONTAINER_NAME=jada-server
          if [ "$(sudo docker ps -aq -f name=$CONTAINER_NAME)" ]; then
            echo "Stopping and removing existing container named $CONTAINER_NAME..."
            sudo docker stop $CONTAINER_NAME || true
            sudo docker rm $CONTAINER_NAME || true
          else
            echo "No container named $CONTAINER_NAME is running."
          fi
        shell: /usr/bin/bash -e {0}

      - name: Run Docker container
        run: bash ./scripts/docker/start.sh
        shell: /usr/bin/bash -e {0}
