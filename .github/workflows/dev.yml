name: Python App Docker Compose CI/CD

on:
  push:
    branches: [ development ]

jobs:
  prepare-artifacts:
    name: Prepare Deployment Artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Write Secrets to .env
        run: |
          echo "PORT=8000" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "TWO_FACTOR_ISSUER_NAME=${{ secrets.TWO_FACTOR_ISSUER_NAME }}" >> .env
          echo "BREVO_API_KEY=${{ secrets.BREVO_API_KEY }}" >> .env
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
          echo "DEFAULT_FROM_NAME=${{ secrets.DEFAULT_FROM_NAME }}" >> .env

      - name: Bundle artifacts
        run: |
          tar --exclude=deployment-artifacts.tar.gz --exclude=.git -czf deployment-artifacts.tar.gz . .env

      - uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment-artifacts.tar.gz

  deploy:
    name: Deploy with Docker Compose
    runs-on: [self-hosted, jada-server-dev]
    needs: prepare-artifacts
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts

      - name: Extract deployment bundle
        run: tar -xvf deployment-artifacts.tar.gz

      - name: Set .env file permissions
        run: chmod 600 .env

      - name: Stop existing containers
        run: |
          docker compose -f docker-compose.yml --env-file .env down || true

      - name: Build and start services
        run: |
          docker compose -f docker-compose.yml --env-file .env up -d --build

      - name: Wait for web service
        run: |
          for i in {1..10}; do
            if docker compose exec web python manage.py check; then
              echo "Service is ready"
              break
            fi
            echo "Waiting for service..."
            sleep 5
          done

      - name: Run collectstatic
        run: |
          docker compose exec web \
            python manage.py collectstatic --noinput --clear --settings=buildcalc.settings.production