name: Production - AWS Cloud Server

on:
  push:
    branches:
      - main-0
    tags:
      - deploy-production-v**

env:
  ECR_REPOSITORY: jada-server
  AWS_REGION: us-east-1
  IMAGE_TAG: latest

jobs:
  build:
    if: startsWith(github.ref, 'refs/tags/deploy-production-v')
    environment: production
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
            
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      
      - name: Create .env File
        run: |
          echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}" >> .env
          echo "FLASK_APP=${{ secrets.FLASK_APP }}" >> .env
          echo "APP_NAME=${{ secrets.APP_NAME }}" >> .env
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "FLASK_ENV=production" >> .env

      - name: Build and push Docker image to ECR
        run: |
          ECR_URI=$(aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region $AWS_REGION --query 'repositories[0].repositoryUri' --output text)
          docker build -t $ECR_URI:$IMAGE_TAG .
          docker push $ECR_URI:$IMAGE_TAG
        env:
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          FLASK_APP: ${{ secrets.FLASK_APP }}
          APP_NAME: ${{ secrets.APP_NAME }}
          FLASK_ENV: production
          PORT: 9000
      
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          script: |
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            docker stop jada-client || true && docker rm jada-client || true
            docker run -d --name jada-client -p 80:3000 ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}